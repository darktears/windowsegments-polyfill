{"version":3,"file":"window-segments-polyfill.js","sources":["../src/index.js"],"sourcesContent":["const POLYFILL_NAMESPACE = \"__foldables_env_vars__\";\nconst SPANNING_MF_VAL_HOR = \"single-fold-horizontal\";\nconst SPANNING_MF_VAL_VER = \"single-fold-vertical\";\nconst SPANNING_MF_VAL_NONE = \"none\";\n\nif (typeof window[POLYFILL_NAMESPACE] === \"undefined\") {\n  // polyfill configuration related variables\n  let spanning =\n    sessionStorage.getItem(`${POLYFILL_NAMESPACE}-spanning`) ||\n    SPANNING_MF_VAL_NONE;\n  let foldSize = sessionStorage.getItem(`${POLYFILL_NAMESPACE}-foldSize`) || 0;\n  let browserShellSize =\n    sessionStorage.getItem(`${POLYFILL_NAMESPACE}-browserShellSize`) || 0;\n  // global configs, accessible via the window object\n  Object.defineProperty(window, POLYFILL_NAMESPACE, {\n    value: {\n      spanning,\n      foldSize,\n      browserShellSize,\n      update,\n      onupdate: [onDeviceSettingsUpdated]\n    }\n  });\n\n  // web-based emulator runs this polyfill in an iframe, we need to communicate\n  // emulator state changes to the site\n  // should only be registered once (in CSS or JS polyfill not both)\n  window.addEventListener(\"message\", evt => {\n    let action = evt.data.action || \"\";\n    let value = evt.data.value || {};\n    if (action === \"update\") {\n      window[POLYFILL_NAMESPACE].update(value);\n    }\n  });\n} else {\n  window[POLYFILL_NAMESPACE].onupdate.push(onDeviceSettingsUpdated);\n}\n\nfunction getWindowSegments() {\n  let segments = [];\n  let viewportWidth = window.innerWidth;\n  let viewporHeight = window.innerHeight;\n\n  let { foldSize, browserShellSize, spanning } = window[POLYFILL_NAMESPACE];\n\n  // those are numbers not strings as stored in sessionStorage\n  foldSize = +foldSize;\n  browserShellSize = +browserShellSize;\n\n  if (spanning === SPANNING_MF_VAL_NONE) {\n    segments.push({\n      left: 0,\n      top: 0,\n      width: viewportWidth,\n      height: viewporHeight\n    });\n  }\n\n  if (spanning === SPANNING_MF_VAL_VER) {\n    let foldLeft = viewportWidth / 2 - foldSize / 2;\n    segments.push(\n      {\n        top: 0,\n        left: 0,\n        width: foldLeft,\n        height: viewporHeight\n      },\n      {\n        left: foldLeft + foldSize,\n        top: 0,\n        width: viewportWidth - (foldLeft + foldSize),\n        height: viewporHeight\n      }\n    );\n  }\n\n  if (spanning === SPANNING_MF_VAL_HOR) {\n    let foldTop = window.innerHeight / 2 - foldSize / 2 - browserShellSize;\n    segments.push(\n      {\n        top: 0,\n        left: 0,\n        width: viewportWidth,\n        height: foldTop\n      },\n      {\n        left: 0,\n        top: foldTop + foldSize,\n        width: viewportWidth,\n        height: viewporHeight - foldTop + foldSize\n      }\n    );\n  }\n  return segments;\n}\n\nif (typeof window.getWindowSegments === \"undefined\") {\n  Object.defineProperty(window, \"getWindowSegments\", {\n    value: getWindowSegments\n  });\n}\n\nfunction onDeviceSettingsUpdated() {\n  console.warn(\"device settings updated, resize the window\");\n}\n\nconst VALID_CONFIG_PROPS = new Set([\n  \"foldSize\",\n  \"browserShellSize\",\n  \"spanning\"\n]);\n\nfunction update(newConfings) {\n  Object.keys(newConfings).forEach(k => {\n    if (VALID_CONFIG_PROPS.has(k)) {\n      window[POLYFILL_NAMESPACE][k] = newConfings[k];\n      sessionStorage.setItem(\n        `${POLYFILL_NAMESPACE}-${k}`,\n        window[POLYFILL_NAMESPACE][k]\n      );\n    }\n  });\n  window[POLYFILL_NAMESPACE].onupdate.forEach(fn => fn());\n}\n"],"names":["const","POLYFILL_NAMESPACE","window","spanning","sessionStorage","getItem","foldSize","browserShellSize","Object","defineProperty","value","newConfings","keys","forEach","k","VALID_CONFIG_PROPS","has","setItem","onupdate","fn","onDeviceSettingsUpdated","addEventListener","evt","data","action","update","push","console","warn","getWindowSegments","segments","viewportWidth","innerWidth","viewporHeight","innerHeight","left","top","width","height","foldLeft","foldTop","Set"],"mappings":"YAAAA,IAAMC,EAAqB,yBAK3B,QAA0C,IAA/BC,OAAOD,GAAqC,KAEjDE,EACFC,eAAeC,QAAWJ,gBALD,OAOvBK,EAAWF,eAAeC,QAAWJ,gBAAkC,EACvEM,EACFH,eAAeC,QAAWJ,wBAA0C,EAEtEO,OAAOC,eAAeP,OAAQD,EAAoB,CAChDS,MAAO,UACLP,WACAG,mBACAC,SA8FN,SAAgBI,GACdH,OAAOI,KAAKD,GAAaE,iBAAQC,GAC3BC,EAAmBC,IAAIF,KACzBZ,OAAOD,GAAoBa,GAAKH,EAAYG,GAC5CV,eAAea,QACVhB,MAAsBa,EACzBZ,OAAOD,GAAoBa,OAIjCZ,OAAOD,GAAoBiB,SAASL,iBAAQM,UAAMA,OAtG9CD,SAAU,CAACE,MAOflB,OAAOmB,iBAAiB,mBAAWC,GAGlB,YAFFA,EAAIC,KAAKC,QAAU,KAG9BtB,OAAOD,GAAoBwB,OAFjBH,EAAIC,KAAKb,OAAS,WAMhCR,OAAOD,GAAoBiB,SAASQ,KAAKN,GAmE3C,SAASA,IACPO,QAAQC,KAAK,mDAPyB,IAA7B1B,OAAO2B,mBAChBrB,OAAOC,eAAeP,OAAQ,oBAAqB,CACjDQ,MA5DJ,eACMoB,EAAW,GACXC,EAAgB7B,OAAO8B,WACvBC,EAAgB/B,OAAOgC,cAEoBhC,OAAOD,qDAGtDK,GAAYA,EACZC,GAAoBA,EA5CO,SA8CvBJ,GACF2B,EAASJ,KAAK,CACZS,KAAM,EACNC,IAAK,EACLC,MAAON,EACPO,OAAQL,IApDc,yBAwDtB9B,EAAkC,KAChCoC,EAAWR,EAAgB,EAAIzB,EAAW,EAC9CwB,EAASJ,KACP,CACEU,IAAK,EACLD,KAAM,EACNE,MAAOE,EACPD,OAAQL,GAEV,CACEE,KAAMI,EAAWjC,EACjB8B,IAAK,EACLC,MAAON,GAAiBQ,EAAWjC,GACnCgC,OAAQL,OAtEY,2BA2EtB9B,EAAkC,KAChCqC,EAAUtC,OAAOgC,YAAc,EAAI5B,EAAW,EAAIC,EACtDuB,EAASJ,KACP,CACEU,IAAK,EACLD,KAAM,EACNE,MAAON,EACPO,OAAQE,GAEV,CACEL,KAAM,EACNC,IAAKI,EAAUlC,EACf+B,MAAON,EACPO,OAAQL,EAAgBO,EAAUlC,WAIjCwB,KAaT9B,IAAMe,EAAqB,IAAI0B,IAAI,CACjC,WACA,mBACA"}